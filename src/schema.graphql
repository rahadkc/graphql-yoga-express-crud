type Query {
    post: Post!
    user: User!
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    comments(query: String): [Comment!]!
}

type Mutation {
    createUser(input: createUserInput): User!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, input: updateUserInput): User!
    createPost(input: createPostInput): Post!
    updatePost(id: ID!, input: updatePostInput): Post!
    deletePost(userId: ID!, postId: ID!): Post!
    createComment(input: createCommentInput): Comment!
    deleteComment(id: ID!):  Comment!
    updateComment(id: ID!, input: updateCommentInput): Comment!
}

input createUserInput {
    name: String!
    email: String!
    age: Int
}

input updateUserInput {
    name: String,
    email: String,
    age: Int
}

input createPostInput {
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input updatePostInput {
    title: String
    body: String
    published: Boolean
    author: ID
}

input createCommentInput {
    text: String!
    author: ID!
    post: ID!
}

input updateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String!
    age: Int,
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}